{"version":3,"sources":["components/PriceToOutcomeChart.js","pages/Fund/RiskReturn.js"],"names":["renderYAxisTick","x","y","payload","fill","value","width","textAnchor","renderShape","cx","cy","r","active","PriceToOutcomeChart","props","sorted","data","sort","a","b","price","dataKey","type","domain","interval","stroke","height","padding","left","right","axisLine","strokeWidth","tickLine","tick","fontWeight","tickCount","offset","position","top","bottom","style","angle","line","shape","RiskReturn","account","useWeb3Context","ethBalance","useEthBalance","ethFundUnits","useEthFundUnits","useFundDates","purchaseExpiringDate","redeemStartingDate","daiPool","useDaiPool","ethPool","useEthPool","ethInvestorAmount","useEthInvestorAmount","daiToEthRate","usePriceConvertionRate","currentEthPrice","purchaseEthFund","useEthFundPurchase","redeemEthFund","useEthFundRedeem","addTransaction","useTransactionAdder","useState","amount","setAmount","setPrice","connected","useMemo","totalPoolInEth","times","plus","leverage","div","estimatedProfits","profitPerUnit","minus","gt","BigNumber","estimatedProfitRate","chartData","parseInt","toFixed","rate","onPurchase","useCallback","amountParsed","toString","on","hash","onRedeem","canPurchase","Date","now","canRedeem","strong","amountFormatter","placeholder","onChange","event","target","className","onClick","disabled","dateFormatter"],"mappings":"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","file":"static/js/7.67658b04.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  Label,\n} from 'recharts'\n\nfunction renderYAxisTick({ x, y, payload }) {\n  const fill = payload.value === 100 ? '#F9FF2D' : '#FFFFFF'\n  return (\n    <text x={x - 10} y={y} fill={fill} width='80' textAnchor='middle'>\n      {`${payload.value}%`}\n    </text>\n  )\n}\n\nfunction renderShape({ cx, cy, r, payload }) {\n  const fill = payload.active ? '#F9FF2D' : '#00FF8C'\n  return <circle cx={cx} cy={cy} r='4' fill={fill} />\n}\n\nexport default function PriceToOutcomeChart(props) {\n  const { data } = props\n  const sorted = data.sort((a, b) => a.price - b.price)\n  return (\n    <ResponsiveContainer>\n      <ScatterChart>\n        <XAxis\n          dataKey='price'\n          type='number'\n          domain={['dataMin', 'dataMax']}\n          interval={0}\n          stroke='#FFFFFF'\n          height={50}\n          padding={{ left: 30, right: 30 }}\n          axisLine={{ strokeWidth: 2 }}\n          tickLine={false}\n          tick={{ fontWeight: 500 }}\n          tickCount={10}\n        >\n          <Label\n            value='ETH Price (USD)'\n            offset={5}\n            position='insideBottom'\n            fill='#FFFFFF'\n            fontWeight={500}\n          />\n        </XAxis>\n        <YAxis\n          dataKey='rate'\n          type='number'\n          stroke='#FFFFFF'\n          width={80}\n          padding={{ top: 30, bottom: 30 }}\n          axisLine={false}\n          tickLine={false}\n          tick={renderYAxisTick}\n          // tickFormatter={value => `${value}%`}\n        >\n          <Label\n            value='Outcome / Current Price'\n            offset={10}\n            position='insideLeft'\n            style={{ textAnchor: 'middle' }}\n            angle={-90}\n            fill='#FFFFFF'\n            fontWeight={500}\n          />\n        </YAxis>\n        <Scatter\n          data={sorted}\n          line={{ stroke: '#00FF8C', strokeWidth: 4 }}\n          fill='#00FF8C'\n          shape={renderShape}\n        />\n      </ScatterChart>\n    </ResponsiveContainer>\n  )\n}\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3Context } from 'web3-react'\nimport { useTransactionAdder } from '../../contexts/transaction'\nimport { usePriceConvertionRate, useEthBalance } from '../../hooks/ethereum'\nimport {\n  useDaiPool,\n  useEthPool,\n  useEthInvestorAmount,\n  useEthFundUnits,\n  useEthFundPurchase,\n  useEthFundRedeem,\n  useFundDates,\n} from '../../hooks/fund'\nimport { amountFormatter, dateFormatter } from '../../utils'\nimport { Container, Row, SubRow, Spacer } from '../../themes/layout'\nimport {\n  Headline,\n  Title,\n  SubTitle,\n  Text,\n  StrongText,\n  Bold,\n} from '../../themes/typography'\nimport {\n  PurchaseBlock,\n  PurchaseBlockTop,\n  PurchaseBlockBottom,\n  PurchaseInfo,\n  PurchaseDate,\n  DataBlock,\n} from '../../themes/block'\nimport {\n  USDInput,\n  PurchaseForm,\n  PurchaseInputField,\n  PurchaseButton,\n} from '../../themes/form'\nimport PriceToOutcomeChart from '../../components/PriceToOutcomeChart'\nimport { ReactComponent as Item } from '../../assets/item.svg'\n\nexport default function RiskReturn() {\n  const { account } = useWeb3Context()\n\n  const ethBalance = useEthBalance()\n  const ethFundUnits = useEthFundUnits()\n  const { purchaseExpiringDate, redeemStartingDate } = useFundDates()\n  const daiPool = useDaiPool()\n  const ethPool = useEthPool()\n  const ethInvestorAmount = useEthInvestorAmount()\n  const daiToEthRate = usePriceConvertionRate('DAI', 'ETH')\n  const currentEthPrice = usePriceConvertionRate('ETH', 'USD')\n\n  const purchaseEthFund = useEthFundPurchase()\n  const redeemEthFund = useEthFundRedeem()\n  const addTransaction = useTransactionAdder()\n\n  const [amount, setAmount] = useState('') // purchase amount\n  const [price, setPrice] = useState(500)\n\n  const connected = useMemo(() => !!account, [account])\n\n  const totalPoolInEth = useMemo(\n    () =>\n      daiPool && ethPool && daiToEthRate\n        ? daiPool.times(daiToEthRate).plus(ethPool)\n        : null,\n    [daiPool, ethPool, daiToEthRate],\n  )\n\n  const leverage = useMemo(\n    () => (totalPoolInEth && ethPool ? totalPoolInEth.div(ethPool) : null),\n    [totalPoolInEth, ethPool],\n  )\n\n  const estimatedProfits = useMemo(() => {\n    if (totalPoolInEth && price && daiPool && ethPool) {\n      const profitPerUnit = totalPoolInEth\n        .times(price)\n        .minus(daiPool.times(1.2))\n        .div(ethPool)\n      return profitPerUnit.gt(0) ? profitPerUnit : new BigNumber(0)\n    } else {\n      return null\n    }\n  }, [totalPoolInEth, price, daiPool, ethPool])\n\n  const estimatedProfitRate = useMemo(\n    () =>\n      estimatedProfits && currentEthPrice\n        ? estimatedProfits.minus(currentEthPrice).div(currentEthPrice)\n        : null,\n    [estimatedProfits, currentEthPrice],\n  )\n\n  const chartData = useMemo(() => {\n    if (daiPool && ethPool && totalPoolInEth && currentEthPrice) {\n      const lose100PercentPrice = parseInt(\n        daiPool\n          .times(1.2)\n          .div(totalPoolInEth)\n          .toFixed(0),\n      )\n      const zeroProfitPrice = parseInt(\n        ethPool\n          .times(currentEthPrice)\n          .plus(daiPool.times(1.2))\n          .div(totalPoolInEth)\n          .toFixed(0),\n      )\n      const trippleProfitPrice = parseInt(\n        ethPool\n          .times(currentEthPrice)\n          .times(4)\n          .plus(daiPool.times(1.2))\n          .div(totalPoolInEth)\n          .toFixed(0),\n      )\n      return [\n        { price: lose100PercentPrice, rate: 0 },\n        { price: zeroProfitPrice, rate: 100 },\n        { price: trippleProfitPrice, rate: 400 },\n        {\n          price: price,\n          rate: parseInt(estimatedProfitRate.times(100).toFixed(0)) + 100,\n          active: true,\n        },\n      ]\n    } else {\n      return []\n    }\n  }, [\n    daiPool,\n    ethPool,\n    totalPoolInEth,\n    currentEthPrice,\n    price,\n    estimatedProfitRate,\n  ])\n\n  const onPurchase = useCallback(async () => {\n    const amountParsed = new BigNumber(amount).times(1e18).toString()\n    const purchase = await purchaseEthFund(amountParsed)\n    purchase\n      .on('transactionHash', hash => {\n        addTransaction(hash)\n      })\n      .on('error', () => {\n        setAmount('')\n      })\n  }, [purchaseEthFund, addTransaction, amount])\n\n  const onRedeem = useCallback(async () => {\n    const amountParsed = new BigNumber(amount).times(1e18).toString()\n    const redeem = await redeemEthFund(amountParsed)\n    redeem\n      .on('transactionHash', hash => {\n        addTransaction(hash)\n      })\n      .on('error', () => {\n        setAmount('')\n      })\n  }, [redeemEthFund, amount, addTransaction])\n\n  const canPurchase = Date.now() < purchaseExpiringDate\n\n  const canRedeem = Date.now() > redeemStartingDate\n\n  const renderForm = () => {\n    if (canPurchase) {\n      return (\n        <PurchaseForm>\n          <PurchaseInputField>\n            <input\n              type='number'\n              placeholder='0.0'\n              value={amount}\n              onChange={event => {\n                setAmount(event.target.value)\n              }}\n            />\n            <span className='suffix'>ETH</span>\n          </PurchaseInputField>\n          <PurchaseButton onClick={onPurchase} disabled={!connected}>\n            Purchase\n          </PurchaseButton>\n        </PurchaseForm>\n      )\n    } else if (canRedeem) {\n      return (\n        <PurchaseForm>\n          <PurchaseInputField>\n            <input\n              type='number'\n              placeholder='0.0'\n              value={amount}\n              onChange={event => {\n                setAmount(event.target.value)\n              }}\n            />\n            <span className='suffix'>ETH</span>\n          </PurchaseInputField>\n          <PurchaseButton onClick={onRedeem} disabled={!connected}>\n            Redeem\n          </PurchaseButton>\n        </PurchaseForm>\n      )\n    } else {\n      return (\n        <PurchaseInfo>\n          <SubTitle>The fund is in the locked period.</SubTitle>\n        </PurchaseInfo>\n      )\n    }\n  }\n\n  return (\n    <Container>\n      <Row>\n        <DataBlock strong>\n          <Title>Leverage</Title>\n          <StrongText>{leverage ? leverage.toFixed(2) : '-'}</StrongText>\n        </DataBlock>\n        <DataBlock>\n          <Title>Pool (ETH)</Title>\n          <StrongText>\n            {ethPool ? amountFormatter(ethPool, 18) : '-'}\n          </StrongText>\n        </DataBlock>\n        <DataBlock>\n          <Title>Investors</Title>\n          <StrongText>{ethInvestorAmount || '-'}</StrongText>\n        </DataBlock>\n      </Row>\n      <Row>\n        <PurchaseBlock>\n          <PurchaseBlockTop>\n            <PurchaseInfo>\n              <Title>\n                <Bold>\n                  Already Bought{' '}\n                  {ethFundUnits ? amountFormatter(ethFundUnits, 18) : '0'}{' '}\n                  units.\n                </Bold>\n              </Title>\n              <SubTitle>\n                Your Balance:{' '}\n                {ethBalance ? amountFormatter(ethBalance, 18) : '-'} ETH\n              </SubTitle>\n            </PurchaseInfo>\n            {renderForm()}\n          </PurchaseBlockTop>\n          <PurchaseBlockBottom>\n            <PurchaseDate>\n              <div className='item'>\n                <Item />\n                <Text>\n                  Purchase Due Date:{' '}\n                  {purchaseExpiringDate\n                    ? dateFormatter(purchaseExpiringDate)\n                    : '-'}\n                </Text>\n              </div>\n              <div className='item'>\n                <Item />\n                <Text>\n                  Redeem Starting Date:{' '}\n                  {redeemStartingDate ? dateFormatter(redeemStartingDate) : '-'}\n                </Text>\n              </div>\n            </PurchaseDate>\n          </PurchaseBlockBottom>\n        </PurchaseBlock>\n      </Row>\n      <Row>\n        <Headline>\n          Estimated Profits/unit if Ether hits USD\n          <USDInput\n            type='number'\n            placeholder='200'\n            value={price}\n            onChange={event => {\n              setPrice(event.target.value)\n            }}\n          />\n        </Headline>\n        <Spacer />\n        <SubTitle>Unit: USD/ETH</SubTitle>\n      </Row>\n      <SubRow>\n        <DataBlock>\n          <Title>Outcomes</Title>\n          <StrongText>\n            {estimatedProfits ? estimatedProfits.toFixed(4) : '-'}\n          </StrongText>\n        </DataBlock>\n        <DataBlock>\n          <Title>Profit Rate</Title>\n          <StrongText>\n            {estimatedProfitRate\n              ? `${estimatedProfitRate.times(100).toFixed(0)}%`\n              : '-'}\n          </StrongText>\n        </DataBlock>\n        <DataBlock>\n          <Title>Current Price</Title>\n          <StrongText>\n            {currentEthPrice ? currentEthPrice.toFixed(2) : '-'}\n          </StrongText>\n        </DataBlock>\n      </SubRow>\n      <SubRow>\n        <DataBlock>\n          <div style={{ width: '90%', height: '300px' }}>\n            <PriceToOutcomeChart data={chartData} />\n          </div>\n        </DataBlock>\n      </SubRow>\n    </Container>\n  )\n}\n"],"sourceRoot":""}