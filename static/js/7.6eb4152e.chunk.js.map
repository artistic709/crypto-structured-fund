{"version":3,"sources":["components/PriceToOutcomeChart.js","pages/Fund/RiskReturn.js"],"names":["renderYAxisTick","x","y","payload","fill","value","width","textAnchor","renderShape","cx","cy","r","active","PriceToOutcomeChart","props","investingData","holdingData","sortedInvestingData","sort","a","b","price","sortedHoldingData","dataKey","type","domain","interval","stroke","height","padding","left","right","axisLine","strokeWidth","tickLine","tick","fontWeight","tickCount","offset","position","top","bottom","style","angle","verticalAlign","iconSize","name","data","line","shape","RiskReturn","account","useWeb3Context","ethBalance","useEthBalance","ethFundUnits","useEthFundUnits","useFundDates","purchaseExpiringDate","redeemStartingDate","daiPool","useDaiPool","ethPool","useEthPool","ethInvestorAmount","useEthInvestorAmount","daiToEthRate","usePriceConvertionRate","currentEthPrice","purchaseEthFund","useEthFundPurchase","redeemEthFund","useEthFundRedeem","addTransaction","useTransactionAdder","useState","amount","setAmount","setPrice","connected","useMemo","totalPoolInEth","times","plus","leverage","div","currentProfits","profitPerUnit","minus","gt","BigNumber","currentProfitRate","estimatedProfits","estimatedProfitRate","chartData","lose100PercentPrice","parseInt","toFixed","zeroProfitPrice","trippleProfitPrice","zeroProfitRateIfHolding","trippleProfitRateIfHolding","profitRateIfHolding","investingOutcomeData","rate","holdingOutcomeData","onPurchase","useCallback","amountParsed","toString","hash","onRedeem","canPurchase","Date","now","canRedeem","strong","amountFormatter","placeholder","onChange","event","target","className","onClick","disabled","dateFormatter","justifyBetween"],"mappings":"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","file":"static/js/7.6eb4152e.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  Label,\n  Legend,\n} from 'recharts'\n\nfunction renderYAxisTick({ x, y, payload }) {\n  const fill = payload.value === 100 ? '#F9FF2D' : '#FFFFFF'\n  return (\n    <text x={x - 10} y={y} fill={fill} width='80' textAnchor='middle'>\n      {`${payload.value}%`}\n    </text>\n  )\n}\n\nfunction renderShape({ cx, cy, r, payload }) {\n  const fill = payload.active ? '#F9FF2D' : '#00FF8C'\n  return <circle cx={cx} cy={cy} r='4' fill={fill} />\n}\n\nexport default function PriceToOutcomeChart(props) {\n  const { investingData, holdingData } = props\n  const sortedInvestingData = investingData.sort((a, b) => a.price - b.price)\n  const sortedHoldingData = holdingData.sort((a, b) => a.price - b.price)\n  return (\n    <ResponsiveContainer>\n      <ScatterChart>\n        <XAxis\n          dataKey='price'\n          type='number'\n          domain={['dataMin', 'dataMax']}\n          interval={0}\n          stroke='#FFFFFF'\n          height={50}\n          padding={{ left: 30, right: 30 }}\n          axisLine={{ strokeWidth: 2 }}\n          tickLine={false}\n          tick={{ fontWeight: 500 }}\n          tickCount={10}\n        >\n          <Label\n            value='ETH Price (USD)'\n            offset={5}\n            position='insideBottom'\n            fill='#FFFFFF'\n            fontWeight={500}\n          />\n        </XAxis>\n        <YAxis\n          dataKey='rate'\n          type='number'\n          stroke='#FFFFFF'\n          width={80}\n          padding={{ top: 30, bottom: 30 }}\n          axisLine={false}\n          tickLine={false}\n          tick={renderYAxisTick}\n          // tickFormatter={value => `${value}%`}\n        >\n          <Label\n            value='Outcome / Current Price'\n            offset={10}\n            position='insideLeft'\n            style={{ textAnchor: 'middle' }}\n            angle={-90}\n            fill='#FFFFFF'\n            fontWeight={500}\n          />\n        </YAxis>\n        <Legend verticalAlign='top' height={36} iconSize={8} />\n        <Scatter\n          name='Outcome if Investing'\n          data={sortedInvestingData}\n          line={{ stroke: '#00FF8C', strokeWidth: 4 }}\n          fill='#00FF8C'\n          shape={renderShape}\n        />\n        <Scatter\n          name='Outcome if Holding'\n          data={sortedHoldingData}\n          line={{ stroke: '#00C8FF', strokeWidth: 4 }}\n          fill='#00C8FF'\n        />\n      </ScatterChart>\n    </ResponsiveContainer>\n  )\n}\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3Context } from 'web3-react'\nimport { useTransactionAdder } from '../../contexts/transaction'\nimport { usePriceConvertionRate, useEthBalance } from '../../hooks/ethereum'\nimport {\n  useDaiPool,\n  useEthPool,\n  useEthInvestorAmount,\n  useEthFundUnits,\n  useEthFundPurchase,\n  useEthFundRedeem,\n  useFundDates,\n} from '../../hooks/fund'\nimport { amountFormatter, dateFormatter } from '../../utils'\nimport { Container, Row, SubRow } from '../../themes/layout'\nimport {\n  Headline,\n  Title,\n  SubTitle,\n  Text,\n  StrongText,\n  Bold,\n} from '../../themes/typography'\nimport {\n  PurchaseBlock,\n  PurchaseBlockTop,\n  PurchaseBlockBottom,\n  PurchaseInfo,\n  PurchaseDate,\n  DataBlock,\n} from '../../themes/block'\nimport {\n  USDInput,\n  PurchaseForm,\n  PurchaseInputField,\n  PurchaseButton,\n} from '../../themes/form'\nimport PriceToOutcomeChart from '../../components/PriceToOutcomeChart'\nimport { ReactComponent as Item } from '../../assets/item.svg'\n\nexport default function RiskReturn() {\n  const { account } = useWeb3Context()\n\n  const ethBalance = useEthBalance()\n  const ethFundUnits = useEthFundUnits()\n  const { purchaseExpiringDate, redeemStartingDate } = useFundDates()\n  const daiPool = useDaiPool()\n  const ethPool = useEthPool()\n  const ethInvestorAmount = useEthInvestorAmount()\n  const daiToEthRate = usePriceConvertionRate('DAI', 'ETH')\n  const currentEthPrice = usePriceConvertionRate('ETH', 'USD')\n\n  const purchaseEthFund = useEthFundPurchase()\n  const redeemEthFund = useEthFundRedeem()\n  const addTransaction = useTransactionAdder()\n\n  const [amount, setAmount] = useState('') // purchase amount\n  const [price, setPrice] = useState(500)\n\n  const connected = useMemo(() => !!account, [account])\n\n  const totalPoolInEth = useMemo(\n    () =>\n      daiPool && ethPool && daiToEthRate\n        ? daiPool.times(daiToEthRate).plus(ethPool)\n        : null,\n    [daiPool, ethPool, daiToEthRate],\n  )\n\n  const leverage = useMemo(\n    () => (totalPoolInEth && ethPool ? totalPoolInEth.div(ethPool) : null),\n    [totalPoolInEth, ethPool],\n  )\n\n  const currentProfits = useMemo(() => {\n    if (totalPoolInEth && daiPool && ethPool) {\n      const profitPerUnit = totalPoolInEth\n        .times(currentEthPrice)\n        .minus(daiPool.times(1.2))\n        .div(ethPool)\n      return profitPerUnit.gt(0) ? profitPerUnit : new BigNumber(0)\n    } else {\n      return null\n    }\n  }, [currentEthPrice, daiPool, ethPool, totalPoolInEth])\n\n  const currentProfitRate = useMemo(\n    () =>\n      currentProfits && currentEthPrice\n        ? currentProfits.minus(currentEthPrice).div(currentEthPrice)\n        : null,\n    [currentEthPrice, currentProfits],\n  )\n\n  const estimatedProfits = useMemo(() => {\n    if (totalPoolInEth && daiPool && ethPool) {\n      const profitPerUnit = totalPoolInEth\n        .times(price)\n        .minus(daiPool.times(1.2))\n        .div(ethPool)\n      return profitPerUnit.gt(0) ? profitPerUnit : new BigNumber(0)\n    } else {\n      return null\n    }\n  }, [totalPoolInEth, price, daiPool, ethPool])\n\n  const estimatedProfitRate = useMemo(\n    () =>\n      estimatedProfits && currentEthPrice\n        ? estimatedProfits.minus(currentEthPrice).div(currentEthPrice)\n        : null,\n    [estimatedProfits, currentEthPrice],\n  )\n\n  const chartData = useMemo(() => {\n    if (daiPool && ethPool && totalPoolInEth && currentEthPrice) {\n      const lose100PercentPrice = parseInt(\n        daiPool\n          .times(1.2)\n          .div(totalPoolInEth)\n          .toFixed(0),\n      )\n      const zeroProfitPrice = parseInt(\n        ethPool\n          .times(currentEthPrice)\n          .plus(daiPool.times(1.2))\n          .div(totalPoolInEth)\n          .toFixed(0),\n      )\n      const trippleProfitPrice = parseInt(\n        ethPool\n          .times(currentEthPrice)\n          .times(4)\n          .plus(daiPool.times(1.2))\n          .div(totalPoolInEth)\n          .toFixed(0),\n      )\n\n      const zeroProfitRateIfHolding = parseInt(\n        new BigNumber(zeroProfitPrice)\n          .minus(currentEthPrice)\n          .div(currentEthPrice)\n          .times(100)\n          .plus(100)\n          .toFixed(0),\n      )\n\n      const trippleProfitRateIfHolding = parseInt(\n        new BigNumber(trippleProfitPrice)\n          .minus(currentEthPrice)\n          .div(currentEthPrice)\n          .times(100)\n          .plus(100)\n          .toFixed(0),\n      )\n\n      const profitRateIfHolding = parseInt(\n        new BigNumber(price)\n          .minus(currentEthPrice)\n          .div(currentEthPrice)\n          .times(100)\n          .plus(100)\n          .toFixed(0),\n      )\n\n      const investingOutcomeData = [\n        { price: lose100PercentPrice - 30, rate: 0 },\n        { price: lose100PercentPrice, rate: 0 },\n        { price: zeroProfitPrice, rate: 100 },\n        { price: trippleProfitPrice, rate: 400 },\n        {\n          price: price,\n          rate: parseInt(estimatedProfitRate.times(100).toFixed(0)) + 100,\n          active: true,\n        },\n      ]\n\n      const holdingOutcomeData = [\n        { price: zeroProfitPrice, rate: zeroProfitRateIfHolding },\n        { price: trippleProfitPrice, rate: trippleProfitRateIfHolding },\n        { price: price, rate: profitRateIfHolding, active: true },\n      ]\n\n      return { investingOutcomeData, holdingOutcomeData }\n    } else {\n      return { investingOutcomeData: [], holdingOutcomeData: [] }\n    }\n  }, [\n    daiPool,\n    ethPool,\n    totalPoolInEth,\n    currentEthPrice,\n    price,\n    estimatedProfitRate,\n  ])\n\n  const onPurchase = useCallback(async () => {\n    const amountParsed = new BigNumber(amount).times(1e18).toString()\n    const onTransactionHash = hash => {\n      addTransaction(hash)\n    }\n    const onConfirmation = () => {\n      setAmount('')\n    }\n    const onError = () => {\n      setAmount('')\n    }\n    purchaseEthFund(amountParsed, onTransactionHash, onConfirmation, onError)\n  }, [purchaseEthFund, addTransaction, amount])\n\n  const onRedeem = useCallback(async () => {\n    const amountParsed = new BigNumber(amount).times(1e18).toString()\n    const onTransactionHash = hash => {\n      addTransaction(hash)\n    }\n    const onConfirmation = () => {\n      setAmount('')\n    }\n    const onError = () => {\n      setAmount('')\n    }\n    redeemEthFund(amountParsed, onTransactionHash, onConfirmation, onError)\n  }, [redeemEthFund, amount, addTransaction])\n\n  const canPurchase = Date.now() < purchaseExpiringDate\n\n  const canRedeem = Date.now() > redeemStartingDate\n\n  const renderForm = () => {\n    if (canPurchase) {\n      return (\n        <PurchaseForm>\n          <PurchaseInputField>\n            <input\n              type='number'\n              placeholder='0.0'\n              value={amount}\n              onChange={event => {\n                setAmount(event.target.value)\n              }}\n            />\n            <span className='suffix'>ETH</span>\n          </PurchaseInputField>\n          <PurchaseButton onClick={onPurchase} disabled={!connected}>\n            Purchase\n          </PurchaseButton>\n        </PurchaseForm>\n      )\n    } else if (canRedeem) {\n      return (\n        <PurchaseForm>\n          <PurchaseInputField>\n            <input\n              type='number'\n              placeholder='0.0'\n              value={amount}\n              onChange={event => {\n                setAmount(event.target.value)\n              }}\n            />\n            <span className='suffix'>ETH</span>\n          </PurchaseInputField>\n          <PurchaseButton onClick={onRedeem} disabled={!connected}>\n            Redeem\n          </PurchaseButton>\n        </PurchaseForm>\n      )\n    } else {\n      return (\n        <PurchaseInfo>\n          <SubTitle>The fund is in the locked period.</SubTitle>\n        </PurchaseInfo>\n      )\n    }\n  }\n\n  return (\n    <Container>\n      <Row>\n        <DataBlock strong>\n          <Title>Leverage</Title>\n          <StrongText>{leverage ? leverage.toFixed(2) : '-'}</StrongText>\n        </DataBlock>\n        <DataBlock>\n          <Title>Pool (ETH)</Title>\n          <StrongText>\n            {ethPool ? amountFormatter(ethPool, 18) : '-'}\n          </StrongText>\n        </DataBlock>\n        <DataBlock>\n          <Title>Investors</Title>\n          <StrongText>{ethInvestorAmount || '-'}</StrongText>\n        </DataBlock>\n      </Row>\n      <Row>\n        <PurchaseBlock>\n          <PurchaseBlockTop>\n            <PurchaseInfo>\n              <Title>\n                <Bold>\n                  Already Bought{' '}\n                  {ethFundUnits ? amountFormatter(ethFundUnits, 18) : '0'}{' '}\n                  units.\n                </Bold>\n              </Title>\n              <SubTitle>\n                Your Balance:{' '}\n                {ethBalance ? amountFormatter(ethBalance, 18) : '-'} ETH\n              </SubTitle>\n            </PurchaseInfo>\n            {renderForm()}\n          </PurchaseBlockTop>\n          <PurchaseBlockBottom>\n            <PurchaseDate>\n              <div className='item'>\n                <Item />\n                <Text>\n                  Purchase Due Date:{' '}\n                  {purchaseExpiringDate\n                    ? dateFormatter(purchaseExpiringDate)\n                    : '-'}\n                </Text>\n              </div>\n              <div className='item'>\n                <Item />\n                <Text>\n                  Redeem Starting Date:{' '}\n                  {redeemStartingDate ? dateFormatter(redeemStartingDate) : '-'}\n                </Text>\n              </div>\n            </PurchaseDate>\n          </PurchaseBlockBottom>\n        </PurchaseBlock>\n      </Row>\n      {!canPurchase && !canRedeem && (\n        <>\n          <Row justifyBetween>\n            <Headline>\n              Your Profit/unit according to current Ether Price\n            </Headline>\n            <SubTitle>Unit: USD/ETH</SubTitle>\n          </Row>\n          <SubRow>\n            <DataBlock>\n              <Title>Current Price</Title>\n              <StrongText>\n                {currentEthPrice ? currentEthPrice.toFixed(2) : '-'}\n              </StrongText>\n            </DataBlock>\n            <DataBlock>\n              <Title>Outcomes</Title>\n              <StrongText>\n                {currentProfits ? currentProfits.toFixed(4) : '-'}\n              </StrongText>\n            </DataBlock>\n            <DataBlock>\n              <Title>Profit Rate</Title>\n              <StrongText>\n                {currentProfitRate\n                  ? `${currentProfitRate.times(100).toFixed(0)}%`\n                  : '-'}\n              </StrongText>\n            </DataBlock>\n          </SubRow>\n        </>\n      )}\n      <Row justifyBetween>\n        <Headline>\n          Estimated Profits/unit if Ether hits USD\n          <USDInput\n            type='number'\n            placeholder='200'\n            value={price}\n            onChange={event => {\n              setPrice(event.target.value)\n            }}\n          />\n        </Headline>\n        <SubTitle>Unit: USD/ETH</SubTitle>\n      </Row>\n      <SubRow>\n        <DataBlock>\n          <Title>Outcomes</Title>\n          <StrongText>\n            {estimatedProfits ? estimatedProfits.toFixed(4) : '-'}\n          </StrongText>\n        </DataBlock>\n        <DataBlock>\n          <Title>Profit Rate</Title>\n          <StrongText>\n            {estimatedProfitRate\n              ? `${estimatedProfitRate.times(100).toFixed(0)}%`\n              : '-'}\n          </StrongText>\n        </DataBlock>\n      </SubRow>\n      <SubRow>\n        <DataBlock>\n          <div style={{ width: '90%', height: '300px' }}>\n            <PriceToOutcomeChart\n              investingData={chartData.investingOutcomeData}\n              holdingData={chartData.holdingOutcomeData}\n            />\n          </div>\n        </DataBlock>\n      </SubRow>\n    </Container>\n  )\n}\n"],"sourceRoot":""}