{"version":3,"sources":["components/PriceBarChart.js","pages/Fund/TargetReturn.js"],"names":["PriceBarChart","props","data","fullProfitPrice","lossPrice","currentPrice","barSize","barGap","stroke","width","padding","top","bottom","axisLine","tickLine","tick","fontWeight","value","offset","position","style","textAnchor","angle","fill","dataKey","y","strokeDasharray","label","TargetReturn","account","useWeb3Context","daiBalance","useDaiBalance","useDaiAllowance","daiAllowance","allowance","daiApprove","approve","useState","setDaiApprovePending","useFundDates","purchaseExpiringDate","redeemStartingDate","daiFundUnits","useDaiFundUnits","rate","useRate","daiPool","useDaiPool","ethPool","useEthPool","daiInvestorAmount","useDaiInvestorAmount","daiToEthRate","usePriceConvertionRate","currentEthPrice","purchaseDaiFund","useDaiFundPurchase","redeemDaiFund","useDaiFundRedeem","addTransaction","useTransactionAdder","amount","setAmount","connected","useMemo","totalPoolInEth","times","plus","priceToGetFullProfit","div","priceToGetLoss","chartData","toNumber","onApprove","useCallback","a","hash","receipt","onPurchase","amountParsed","BigNumber","toString","on","onRedeem","canPurchase","Date","now","canRedeem","strong","amountFormatter","type","placeholder","onChange","event","target","className","lt","onClick","disabled","dateFormatter","justifyBetween","toFixed","height"],"mappings":"kTAUe,SAASA,EAAcC,GAAQ,IACpCC,EAASD,EAATC,KACAC,EAA6CD,EAA7CC,gBAAiBC,EAA4BF,EAA5BE,UAAWC,EAAiBH,EAAjBG,aACpC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUH,KAAM,CAACA,GAAOI,QAAS,GAAIC,OAAQ,IAC3C,kBAAC,IAAD,CACEC,OAAO,UACPC,MAAO,GACPC,QAAS,CAAEC,IAAK,GAAIC,OAAQ,IAC5BC,UAAU,EACVC,UAAU,EACVC,KAAM,CAAEC,WAAY,MAEpB,kBAAC,IAAD,CACEC,MAAM,YACNC,OAAQ,GACRC,SAAS,aACTC,MAAO,CAAEC,WAAY,UACrBC,OAAQ,GACRC,KAAK,UACLP,WAAY,OAGhB,kBAAC,IAAD,CAAKQ,QAAQ,eAAeD,KAAK,YACjC,kBAAC,IAAD,CAAKC,QAAQ,kBAAkBD,KAAK,YACpC,kBAAC,IAAD,CAAKC,QAAQ,YAAYD,KAAK,YAC9B,kBAAC,IAAD,CACEE,EAAGtB,EACHK,OAAO,UACPkB,gBAAgB,OAEhB,kBAAC,IAAD,CACET,MAAM,eACNM,KAAK,UACLP,WAAY,IACZG,SAAS,iBAGb,kBAAC,IAAD,CAAeM,EAAGrB,EAAWI,OAAO,UAAUkB,gBAAgB,OAC5D,kBAAC,IAAD,CACET,MAAM,aACNM,KAAK,UACLP,WAAY,IACZG,SAAS,iBAGb,kBAAC,IAAD,CACEM,EAAGpB,EACHsB,MAAM,gBACNnB,OAAO,UACPkB,gBAAgB,OAEhB,kBAAC,IAAD,CACET,MAAM,gBACNM,KAAK,UACLP,WAAY,IACZG,SAAS,mB,8BCtBN,SAASS,IAAgB,IAC9BC,EAAYC,2BAAZD,QAEFE,EAAaC,cAHkB,EAIoBC,cAAtCC,EAJkB,EAI7BC,UAAkCC,EAJL,EAIJC,QAJI,EAKaC,oBAAS,GALtB,mBAKXC,GALW,aAOgBC,cAA7CC,EAP6B,EAO7BA,qBAAsBC,EAPO,EAOPA,mBACxBC,EAAeC,cACfC,EAAOC,cACPC,EAAUC,cACVC,EAAUC,cACVC,EAAoBC,cACpBC,EAAeC,YAAuB,MAAO,OAC7CC,EAAkBD,YAAuB,MAAO,OAEhDE,EAAkBC,cAClBC,EAAgBC,cAChBC,EAAiBC,cAlBc,EAoBTvB,mBAAS,IApBA,mBAoB9BwB,EApB8B,KAoBtBC,EApBsB,KAsB/BC,EAAYC,mBAAQ,mBAAQpC,IAAS,CAACA,IAEtCqC,EAAiBD,mBACrB,kBACElB,GAAWE,GAAWI,EAClBN,EAAQoB,MAAMd,GAAce,KAAKnB,GACjC,OACN,CAACF,EAASE,EAASI,IAGfgB,EAAuBJ,mBAC3B,kBACElB,GAAWmB,EAAiBnB,EAAQoB,MAAM,KAAKG,IAAIJ,GAAkB,OACvE,CAACnB,EAASmB,IAGNK,EAAiBN,mBACrB,kBAAOlB,GAAWmB,EAAiBnB,EAAQuB,IAAIJ,GAAkB,OACjE,CAACnB,EAASmB,IAGNM,EAAYP,mBAAQ,WAMxB,MAAO,CACL9D,gBANsBkE,EACpBA,EAAqBI,WACrB,EAKFrE,UAJgBmE,EAAiBA,EAAeE,WAAa,EAK7DpE,aAJmBkD,EAAkBA,EAAgBkB,WAAa,KAMnE,CAACJ,EAAsBE,EAAgBhB,IAEpCmB,EAAYC,sBAAW,sBAAC,sBAAAC,EAAA,sDAC5BxC,GACE,SAAAyC,GACEjB,EAAeiB,GACftC,GAAqB,MAEvB,SAAAuC,GACEvC,GAAqB,MAEvB,WACEA,GAAqB,MAGzBA,GAAqB,GAbO,2CAc3B,CAACH,EAAYwB,IAEVmB,EAAaJ,sBAAW,sBAAC,4BAAAC,EAAA,6DACvBI,EAAe,IAAIC,IAAUnB,GAAQK,MAAM,MAAMe,WAD1B,SAEN1B,EAAgBwB,GAFV,cAI1BG,GAAG,mBAAmB,SAAAN,GACrBjB,EAAeiB,MAEhBM,GAAG,SAAS,WACXpB,EAAU,OARe,2CAU5B,CAACP,EAAiBM,EAAQF,IAEvBwB,EAAWT,sBAAW,sBAAC,4BAAAC,EAAA,6DACrBI,EAAe,IAAIC,IAAUnB,GAAQK,MAAM,MAAMe,WAD5B,SAENxB,EAAcsB,GAFR,cAIxBG,GAAG,mBAAmB,SAAAN,GACrBjB,EAAeiB,MAEhBM,GAAG,SAAS,WACXpB,EAAU,OARa,2CAU1B,CAACL,EAAeI,EAAQF,IAErByB,EAAcC,KAAKC,MAAQ9C,EAE3B+C,EAAYF,KAAKC,MAAQ7C,EAkE/B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAW+C,QAAM,GACf,kBAAC,IAAD,oBACA,kBAAC,IAAD,KACG5C,EAAI,UAAMA,EAAKsB,MAAM,KAAKe,WAAtB,KAAsC,MAG/C,kBAAC,IAAD,KACE,kBAAC,IAAD,mBACA,kBAAC,IAAD,KACGnC,EAAU2C,YAAgB3C,EAAS,IAAM,MAG9C,kBAAC,IAAD,KACE,kBAAC,IAAD,kBACA,kBAAC,IAAD,KAAaI,GAAqB,OAGtC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,sBACiB,IACdR,EAAe+C,YAAgB/C,EAAc,IAAM,IAAK,IAF3D,WAMF,kBAAC,IAAD,qBACgB,IACbZ,EAAa2D,YAAgB3D,EAAY,IAAM,IAFlD,SA5ENsD,EAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,2BACEM,KAAK,SACLC,YAAY,MACZ3E,MAAO6C,EACP+B,SAAU,SAAAC,GACR/B,EAAU+B,EAAMC,OAAO9E,UAG3B,0BAAM+E,UAAU,UAAhB,QA9BH9D,EAEMA,EAAa+D,GAAGnC,GAEvB,kBAAC,IAAD,CAAgBoC,QAASxB,EAAWyB,UAAWnC,GAA/C,UAMA,kBAAC,IAAD,CAAgBkC,QAASnB,EAAYoB,UAAWnC,GAAhD,YATK,kBAAC,IAAD,CAAgBmC,UAAQ,GAAxB,aAkCEX,EAEP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,2BACEG,KAAK,SACLC,YAAY,MACZ3E,MAAO6C,EACP+B,SAAU,SAAAC,GACR/B,EAAU+B,EAAMC,OAAO9E,UAG3B,0BAAM+E,UAAU,UAAhB,QAEF,kBAAC,IAAD,CAAgBE,QAASd,EAAUe,UAAWnC,GAA9C,WAOF,kBAAC,IAAD,KACE,kBAAC,IAAD,4CA4CA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,yBAAKgC,UAAU,QACb,kBAAC,IAAD,MACA,kBAAC,IAAD,0BACqB,IAClBvD,EACG2D,YAAc3D,GACd,MAGR,yBAAKuD,UAAU,QACb,kBAAC,IAAD,MACA,kBAAC,IAAD,6BACwB,IACrBtD,EAAqB0D,YAAc1D,GAAsB,UAOtE,kBAAC,IAAD,CAAK2D,gBAAc,GACjB,kBAAC,IAAD,mDACA,kBAAC,IAAD,uBAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,sBACA,kBAAC,IAAD,KACG9C,EAAkBA,EAAgB+C,QAAQ,GAAK,MAGpD,kBAAC,IAAD,KACE,kBAAC,IAAD,qBACA,kBAAC,IAAD,KACGjC,EAAuBA,EAAqBiC,QAAQ,GAAK,MAG9D,kBAAC,IAAD,KACE,kBAAC,IAAD,aACA,kBAAC,IAAD,KACG/B,EAAiBA,EAAe+B,QAAQ,GAAK,OAIpD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,yBAAKlF,MAAO,CAAEX,MAAO,MAAO8F,OAAQ,UAClC,kBAACvG,EAAD,CAAeE,KAAMsE,Q","file":"static/js/8.268ed8f8.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  ReferenceLine,\n  YAxis,\n  Label,\n} from 'recharts'\n\nexport default function PriceBarChart(props) {\n  const { data } = props\n  const { fullProfitPrice, lossPrice, currentPrice } = data\n  return (\n    <ResponsiveContainer>\n      <BarChart data={[data]} barSize={40} barGap={40}>\n        <YAxis\n          stroke='#FFFFFF'\n          width={80}\n          padding={{ top: 30, bottom: 30 }}\n          axisLine={false}\n          tickLine={false}\n          tick={{ fontWeight: 500 }}\n        >\n          <Label\n            value='ETH Price'\n            offset={10}\n            position='insideLeft'\n            style={{ textAnchor: 'middle' }}\n            angle={-90}\n            fill='#FFFFFF'\n            fontWeight={500}\n          />\n        </YAxis>\n        <Bar dataKey='currentPrice' fill='#00C8FF' />\n        <Bar dataKey='fullProfitPrice' fill='#00FF8C' />\n        <Bar dataKey='lossPrice' fill='#FF4D53' />\n        <ReferenceLine\n          y={fullProfitPrice}\n          stroke='#FF4D53'\n          strokeDasharray='5 5'\n        >\n          <Label\n            value='Profit Price'\n            fill='#FFFFFF'\n            fontWeight={500}\n            position='insideRight'\n          />\n        </ReferenceLine>\n        <ReferenceLine y={lossPrice} stroke='#FF4D53' strokeDasharray='5 5'>\n          <Label\n            value='Break Even'\n            fill='#FFFFFF'\n            fontWeight={500}\n            position='insideRight'\n          />\n        </ReferenceLine>\n        <ReferenceLine\n          y={currentPrice}\n          label='Current Price'\n          stroke='#FF4D53'\n          strokeDasharray='5 5'\n        >\n          <Label\n            value='Current Price'\n            fill='#FFFFFF'\n            fontWeight={500}\n            position='insideRight'\n          />\n        </ReferenceLine>\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}\n","import React, { useMemo, useState, useCallback } from 'react'\nimport { useWeb3Context } from 'web3-react'\nimport { useTransactionAdder } from '../../contexts/transaction'\nimport {\n  usePriceConvertionRate,\n  useDaiBalance,\n  useDaiAllowance,\n} from '../../hooks/ethereum'\nimport {\n  useRate,\n  useDaiPool,\n  useDaiInvestorAmount,\n  useDaiFundUnits,\n  useDaiFundPurchase,\n  useDaiFundRedeem,\n  useEthPool,\n  useFundDates,\n} from '../../hooks/fund'\nimport { amountFormatter, dateFormatter } from '../../utils'\nimport { Container, Row, SubRow } from '../../themes/layout'\nimport {\n  Headline,\n  Title,\n  SubTitle,\n  Text,\n  StrongText,\n  Bold,\n} from '../../themes/typography'\nimport {\n  PurchaseBlock,\n  PurchaseBlockTop,\n  PurchaseBlockBottom,\n  PurchaseInfo,\n  PurchaseDate,\n  DataBlock,\n} from '../../themes/block'\nimport {\n  PurchaseForm,\n  PurchaseInputField,\n  PurchaseButton,\n} from '../../themes/form'\nimport PriceBarChart from '../../components/PriceBarChart'\nimport { ReactComponent as Item } from '../../assets/item.svg'\nimport BigNumber from 'bignumber.js'\n\nexport default function TargetReturn() {\n  const { account } = useWeb3Context()\n\n  const daiBalance = useDaiBalance()\n  const { allowance: daiAllowance, approve: daiApprove } = useDaiAllowance()\n  const [daiApprovePending, setDaiApprovePending] = useState(false)\n\n  const { purchaseExpiringDate, redeemStartingDate } = useFundDates()\n  const daiFundUnits = useDaiFundUnits()\n  const rate = useRate()\n  const daiPool = useDaiPool()\n  const ethPool = useEthPool()\n  const daiInvestorAmount = useDaiInvestorAmount()\n  const daiToEthRate = usePriceConvertionRate('DAI', 'ETH')\n  const currentEthPrice = usePriceConvertionRate('ETH', 'USD')\n\n  const purchaseDaiFund = useDaiFundPurchase()\n  const redeemDaiFund = useDaiFundRedeem()\n  const addTransaction = useTransactionAdder()\n\n  const [amount, setAmount] = useState('') // purchase amount\n\n  const connected = useMemo(() => !!account, [account])\n\n  const totalPoolInEth = useMemo(\n    () =>\n      daiPool && ethPool && daiToEthRate\n        ? daiPool.times(daiToEthRate).plus(ethPool)\n        : null,\n    [daiPool, ethPool, daiToEthRate],\n  )\n\n  const priceToGetFullProfit = useMemo(\n    () =>\n      daiPool && totalPoolInEth ? daiPool.times(1.2).div(totalPoolInEth) : null,\n    [daiPool, totalPoolInEth],\n  )\n\n  const priceToGetLoss = useMemo(\n    () => (daiPool && totalPoolInEth ? daiPool.div(totalPoolInEth) : null),\n    [daiPool, totalPoolInEth],\n  )\n\n  const chartData = useMemo(() => {\n    const fullProfitPrice = priceToGetFullProfit\n      ? priceToGetFullProfit.toNumber()\n      : 0\n    const lossPrice = priceToGetLoss ? priceToGetLoss.toNumber() : 0\n    const currentPrice = currentEthPrice ? currentEthPrice.toNumber() : 0\n    return {\n      fullProfitPrice,\n      lossPrice,\n      currentPrice,\n    }\n  }, [priceToGetFullProfit, priceToGetLoss, currentEthPrice])\n\n  const onApprove = useCallback(async () => {\n    daiApprove(\n      hash => {\n        addTransaction(hash)\n        setDaiApprovePending(true)\n      },\n      receipt => {\n        setDaiApprovePending(false)\n      }, // dont work\n      () => {\n        setDaiApprovePending(false)\n      },\n    )\n    setDaiApprovePending(false)\n  }, [daiApprove, addTransaction])\n\n  const onPurchase = useCallback(async () => {\n    const amountParsed = new BigNumber(amount).times(1e18).toString()\n    const purchase = await purchaseDaiFund(amountParsed)\n    purchase\n      .on('transactionHash', hash => {\n        addTransaction(hash)\n      })\n      .on('error', () => {\n        setAmount('')\n      })\n  }, [purchaseDaiFund, amount, addTransaction])\n\n  const onRedeem = useCallback(async () => {\n    const amountParsed = new BigNumber(amount).times(1e18).toString()\n    const redeem = await redeemDaiFund(amountParsed)\n    redeem\n      .on('transactionHash', hash => {\n        addTransaction(hash)\n      })\n      .on('error', () => {\n        setAmount('')\n      })\n  }, [redeemDaiFund, amount, addTransaction])\n\n  const canPurchase = Date.now() < purchaseExpiringDate\n\n  const canRedeem = Date.now() > redeemStartingDate\n\n  const renderPurchaseButton = () => {\n    if (!daiAllowance) {\n      return <PurchaseButton disabled>Purchase</PurchaseButton>\n    } else if (daiAllowance.lt(amount)) {\n      return (\n        <PurchaseButton onClick={onApprove} disabled={!connected}>\n          Unlock\n        </PurchaseButton>\n      )\n    } else {\n      return (\n        <PurchaseButton onClick={onPurchase} disabled={!connected}>\n          Purchase\n        </PurchaseButton>\n      )\n    }\n  }\n\n  const renderPurchaseForm = () => {\n    if (canPurchase) {\n      return (\n        <PurchaseForm>\n          <PurchaseInputField>\n            <input\n              type='number'\n              placeholder='0.0'\n              value={amount}\n              onChange={event => {\n                setAmount(event.target.value)\n              }}\n            />\n            <span className='suffix'>DAI</span>\n          </PurchaseInputField>\n          {renderPurchaseButton()}\n        </PurchaseForm>\n      )\n    } else if (canRedeem) {\n      return (\n        <PurchaseForm>\n          <PurchaseInputField>\n            <input\n              type='number'\n              placeholder='0.0'\n              value={amount}\n              onChange={event => {\n                setAmount(event.target.value)\n              }}\n            />\n            <span className='suffix'>ETH</span>\n          </PurchaseInputField>\n          <PurchaseButton onClick={onRedeem} disabled={!connected}>\n            Redeem\n          </PurchaseButton>\n        </PurchaseForm>\n      )\n    } else {\n      return (\n        <PurchaseInfo>\n          <SubTitle>The fund is in the locked period.</SubTitle>\n        </PurchaseInfo>\n      )\n    }\n  }\n\n  return (\n    <Container>\n      <Row>\n        <DataBlock strong>\n          <Title>Profit Rate</Title>\n          <StrongText>\n            {rate ? `${rate.times(100).toString()}%` : '-'}\n          </StrongText>\n        </DataBlock>\n        <DataBlock>\n          <Title>Pool (DAI)</Title>\n          <StrongText>\n            {daiPool ? amountFormatter(daiPool, 18) : '-'}\n          </StrongText>\n        </DataBlock>\n        <DataBlock>\n          <Title>Investors</Title>\n          <StrongText>{daiInvestorAmount || '-'}</StrongText>\n        </DataBlock>\n      </Row>\n      <Row>\n        <PurchaseBlock>\n          <PurchaseBlockTop>\n            <PurchaseInfo>\n              <Title>\n                <Bold>\n                  Already Bought{' '}\n                  {daiFundUnits ? amountFormatter(daiFundUnits, 18) : '0'}{' '}\n                  units.\n                </Bold>\n              </Title>\n              <SubTitle>\n                Your Balance:{' '}\n                {daiBalance ? amountFormatter(daiBalance, 18) : '-'} DAI\n              </SubTitle>\n            </PurchaseInfo>\n            {renderPurchaseForm()}\n          </PurchaseBlockTop>\n          <PurchaseBlockBottom>\n            <PurchaseDate>\n              <div className='item'>\n                <Item />\n                <Text>\n                  Purchase Due Date:{' '}\n                  {purchaseExpiringDate\n                    ? dateFormatter(purchaseExpiringDate)\n                    : '-'}\n                </Text>\n              </div>\n              <div className='item'>\n                <Item />\n                <Text>\n                  Redeem Starting Date:{' '}\n                  {redeemStartingDate ? dateFormatter(redeemStartingDate) : '-'}\n                </Text>\n              </div>\n            </PurchaseDate>\n          </PurchaseBlockBottom>\n        </PurchaseBlock>\n      </Row>\n      <Row justifyBetween>\n        <Headline>Estimated Ether Price that you will get...</Headline>\n        <SubTitle>Unit: USD/ETH</SubTitle>\n      </Row>\n      <SubRow>\n        <DataBlock>\n          <Title>Current Price</Title>\n          <StrongText>\n            {currentEthPrice ? currentEthPrice.toFixed(2) : '-'}\n          </StrongText>\n        </DataBlock>\n        <DataBlock>\n          <Title>Full Profits</Title>\n          <StrongText>\n            {priceToGetFullProfit ? priceToGetFullProfit.toFixed(2) : '-'}\n          </StrongText>\n        </DataBlock>\n        <DataBlock>\n          <Title>Loss</Title>\n          <StrongText>\n            {priceToGetLoss ? priceToGetLoss.toFixed(2) : '-'}\n          </StrongText>\n        </DataBlock>\n      </SubRow>\n      <SubRow>\n        <DataBlock>\n          <div style={{ width: '90%', height: '300px' }}>\n            <PriceBarChart data={chartData} />\n          </div>\n        </DataBlock>\n      </SubRow>\n    </Container>\n  )\n}\n"],"sourceRoot":""}